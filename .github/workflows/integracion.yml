name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: Tests and Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci

      - name: Instalar herramientas adicionales
        run: |
          sudo apt-get update
          sudo apt-get install -y bc jq

      - name: Verificar formato de código
        run: npm run format:check
        continue-on-error: false

      - name: Ejecutar ESLint
        run: npm run lint

      - name: Ejecutar tests unitarios con coverage
        run: npm run test:ci

      - name: Generar reporte de coverage
        run: |
          echo "=== Coverage Summary ==="
          cat coverage/coverage-summary.json | jq '.total'

      - name: Verificar coverage mínimo del 80%
        run: |
          # Crear script para verificar coverage por archivo
          cat > check_coverage.sh << 'EOF'
          #!/bin/bash
          
          COVERAGE_FILE="coverage/coverage-summary.json"
          MIN_COVERAGE=80
          FAILED_FILES=""
          
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "❌ ERROR: No se encontró el archivo de coverage"
            exit 1
          fi
          
          echo "Verificando coverage por archivo (mínimo ${MIN_COVERAGE}%)..."
          echo ""
          
          # Obtener coverage total
          TOTAL_LINES=$(cat $COVERAGE_FILE | jq '.total.lines.pct')
          TOTAL_STATEMENTS=$(cat $COVERAGE_FILE | jq '.total.statements.pct')
          TOTAL_FUNCTIONS=$(cat $COVERAGE_FILE | jq '.total.functions.pct')
          TOTAL_BRANCHES=$(cat $COVERAGE_FILE | jq '.total.branches.pct')
          
          echo "📊 Coverage General:"
          echo "  Lines:      ${TOTAL_LINES}%"
          echo "  Statements: ${TOTAL_STATEMENTS}%"
          echo "  Functions:  ${TOTAL_FUNCTIONS}%"
          echo "  Branches:   ${TOTAL_BRANCHES}%"
          echo ""
          
          # Verificar cada archivo
          FILES=$(cat $COVERAGE_FILE | jq -r 'to_entries | .[] | select(.key != "total") | .key')
          
          while IFS= read -r file; do
            # Ignorar archivos de configuración, spec, y node_modules
            if [[ $file =~ \.spec\.ts$ ]] || \
               [[ $file =~ node_modules ]] || \
               [[ $file =~ \.config\.ts$ ]] || \
               [[ $file =~ test\.ts$ ]] || \
               [[ $file =~ environment ]]; then
              continue
            fi
            
            LINE_PCT=$(cat $COVERAGE_FILE | jq -r ".\"$file\".lines.pct")
            
            if [ "$LINE_PCT" != "null" ] && [ ! -z "$LINE_PCT" ]; then
              echo "  $file: ${LINE_PCT}%"
              
              if (( $(echo "$LINE_PCT < $MIN_COVERAGE" | bc -l) )); then
                FAILED_FILES="${FAILED_FILES}\n  ❌ $file: ${LINE_PCT}% (mínimo: ${MIN_COVERAGE}%)"
              fi
            fi
          done <<< "$FILES"
          
          if [ -n "$FAILED_FILES" ]; then
            echo ""
            echo "❌ Los siguientes archivos no cumplen con el coverage mínimo del ${MIN_COVERAGE}%:"
            echo -e "$FAILED_FILES"
            exit 1
          else
            echo ""
            echo "✅ Todos los archivos cumplen con el coverage mínimo del ${MIN_COVERAGE}%"
          fi
          EOF
          
          chmod +x check_coverage.sh
          ./check_coverage.sh

      - name: Subir reporte de coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
